{"version":3,"sources":["webpack://checkout/./src/app/common/form/connectFormik.tsx","webpack://checkout/./src/app/common/utility/parseAnchor.ts","webpack://checkout/./src/app/locale/TranslatedLink.tsx","webpack://checkout/./src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./src/app/shipping/getShippingMethodId.ts","webpack://checkout/./src/app/address/AddressFormModal.tsx","webpack://checkout/./src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./src/app/shipping/findConsignment.ts","webpack://checkout/./src/app/shipping/getShippableLineItems.ts","webpack://checkout/./src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./src/app/shipping/updateShippableItems.ts","webpack://checkout/./src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./src/app/shipping/RemoteShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./src/app/shipping/ShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingHeader.tsx","webpack://checkout/./src/app/shipping/Shipping.tsx","webpack://checkout/./src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./src/app/ui/accordion/Accordion.tsx","webpack://checkout/./src/app/ui/form/Checklist.tsx","webpack://checkout/./src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./src/app/ui/form/ChecklistItem.tsx"],"names":["connectFormik","OriginalComponent","InnerComponent","memo","props","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","connect","displayName","name","parseAnchor","text","div","document","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","data","id","language","onClick","testId","translatedString","translate","parsedString","length","href","message","getLanguageService","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","SaveAddressForm","withLanguage","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","className","preventDefault","TranslatedString","Button","disabled","type","variant","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","find","consignment","includes","lineItemIds","getShippableLineItems","cart","reduce","lineItems","physicalItems","result","item","i","addedByPromotion","isNil","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","address","handleSelectAddress","alt","src","map","optionName","value","nameId","AddressSelect","selectedAddress","shippingAddress","ShippingOptionListItem","consignmentId","shippingOption","renderLabel","StaticShippingOption","displayAdditionalInformation","method","ChecklistItem","htmlId","label","inputName","shippingOptions","selectedShippingOptionId","onSelectedOption","handleSelect","Checklist","defaultSelectedItemId","onSelect","selectDefaultShippingOptions","this","selectShippingOption","getConsignments","selectedShippingOption","availableShippingOptions","recommendedOption","getRecommendedShippingOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentWillUnmount","render","isMultiShippingMode","shouldShowShippingOptions","invalidShippingMessage","methodId","renderConsignment","hideContentWhenLoading","renderNoShippingOptions","StaticAddress","StaticConsignmentItemList","PureComponent","noop","shippingOptionIds","forEach","ShippingOptionsForm","subscribeToConsignmentsSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","sortConsignments","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","config","checkoutSettings","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","Fieldset","legend","Legend","Alert","ShippingOptions","OrderComments","state","items","handleCloseErrorModal","setState","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItemIds","filter","findNewItemId","updateShippableItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","onCreateAccount","TranslatedLink","Fragment","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","onChange","labelContent","useMemo","CheckboxFormField","handleFieldValueChange","onFieldChange","initialize","deinitialize","containerId","tabIndex","field","DynamicFormField","parentFieldName","addressFieldName","fieldName","fieldValue","formFieldName","custom","handleChange","handleAutocompleteToggle","inputValue","onAddressSelect","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","Component","ShippingAddressForm","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","useContext","initializeShipping","memoizeOne","defaultOptions","amazon","container","onError","amazonpay","editAddressButtonId","SHIPPING_ADDRESS_FIELDS","SHIPPING_AUTOSAVE_DELAY","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","contextType","billingSameAsShipping","isInitialValid","isValidSync","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","shouldShowAddAddressInCheckout","signOut","ShippingForm","onMultiShippingChange","shouldShowMultiShipping","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","push","all","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shippingFormProps","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","Shipping","createContext","onToggle","getContextValue","selectedItemId","handleToggleItem","isDisabled","children","AccordionContext","ChecklistContext","contextValue","Provider","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","isSelected","transitionEndListener","node","done","addEventListener","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","checked","Label","htmlFor","content","kebabCase","rest","renderInput","Function","selectedValue","renderHeaderContent","BasicFormField"],"mappings":"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","file":"shipping-c78c2ae5.js","sourcesContent":["import { connect } from 'formik';\nimport React, { memo, ComponentType, FunctionComponent } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<\n    TProps extends ConnectFormikProps<TValues>,\n    TValues = any\n>(\n    OriginalComponent: ComponentType<TProps>\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        props => <OriginalComponent { ...props } />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) => (\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps)\n        )\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>>;\n\n    DecoratedComponent.displayName = `ConnectFormik(${OriginalComponent.displayName || OriginalComponent.name})`;\n\n    return DecoratedComponent;\n}\n","export default function parseAnchor(text: string): string[] {\n    const div = document.createElement('div');\n    div.innerHTML = text;\n\n    const anchor = div.querySelector('a');\n\n    if (!anchor) {\n        return [];\n    }\n\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\n\n    return [ anchorSiblings[0], anchor.text, anchorSiblings[1] ];\n}\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { parseAnchor } from '../common/utility';\n\nimport withLanguage, { WithLanguageProps } from './withLanguage';\nimport { TranslatedStringProps } from './TranslatedString';\n\nexport type TranslatedLinkProps = TranslatedStringProps & {\n    testId?: string;\n    onClick: MouseEventHandler;\n};\n\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\n    data,\n    id,\n    language,\n    onClick,\n    testId,\n}) => {\n    const translatedString = language.translate(id, data);\n    const parsedString = parseAnchor(translatedString);\n\n    return parsedString.length ?\n        <>\n            { parsedString[0] }\n            <a\n                data-test={ testId }\n                href=\"#\"\n                onClick={ preventDefault(onClick) }\n            >\n                { parsedString[1] }\n            </a>\n            { parsedString[2] }\n        </> :\n        <>{ translatedString }</>;\n};\n\nexport default withLanguage(TranslatedLink);\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getShippingMethodId(checkout: Checkout): string | undefined {\n    const SHIPPING_METHOD_IDS = ['amazon', 'amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1 ?\n        preselectedPayment.providerId :\n        undefined;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\nimport AddressForm from './AddressForm';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={ isLoading }>\n            <AddressForm\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                countryCode={ values.countryCode }\n                formFields={ getFields(values.countryCode) }\n                googleMapsApiKey={ googleMapsApiKey }\n                setFieldValue={ setFieldValue }\n                shouldShowSaveAddress={ false }\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={ preventDefault(onRequestClose) }\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={ isLoading }\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n    handleSubmit: (values, { props: { onSaveAddress } }) => {\n        onSaveAddress(values);\n    },\n    mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n        firstName: '',\n        lastName: '',\n        address1: '',\n        address2: '',\n        customFields: {},\n        country: '',\n        countryCode: defaultCountryCode,\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        postalCode: '',\n        phone: '',\n        city: '',\n        company: '',\n        shouldSaveAddress: false,\n    }),\n    validationSchema: ({\n        language,\n        getFields,\n    }: AddressFormProps & WithLanguageProps) => (\n        lazy<Partial<AddressFormValues>>(values => getAddressFormFieldsValidationSchema({\n            language,\n            formFields: getFields(values && values.countryCode),\n        }))\n    ),\n})(SaveAddress));\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={ isOpen }\n        onAfterOpen={ onAfterOpen }\n        onRequestClose={ onRequestClose }\n        shouldShowCloseButton={ true }\n    >\n        <SaveAddressForm\n            { ...addressFormProps }\n            onRequestClose={ onRequestClose }\n        />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate('shipping.assign_item_invalid_address_error_heading'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string\n): Consignment | undefined {\n    return find(consignments, consignment => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[]\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) => (\n            !item.addedByPromotion && isNil(item.parentId) ?\n                result.concat(...splitItem(item, consignments, i)) :\n                result\n        ),\n        [] as ShippableItem[]\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { AddressSelect } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: {\n        id,\n        key,\n        imageUrl,\n        quantity,\n        name,\n        options,\n        consignment,\n    },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback((address: Address) => {\n        onUseNewAddress(address, id as string, key);\n    }, [\n        id,\n        onUseNewAddress,\n        key,\n    ]);\n\n    const handleSelectAddress = useCallback((address: Address) => {\n        onSelectAddress(address, id as string, key);\n    }, [\n        id,\n        key,\n        onSelectAddress,\n    ]);\n\n    return <div className=\"consignment\">\n        <figure className=\"consignment-product-figure\">\n            { imageUrl &&\n                <img alt={ name } src={ imageUrl } /> }\n        </figure>\n\n        <div className=\"consignment-product-body\">\n            <h5 className=\"optimizedCheckout-contentPrimary\">\n                { `${quantity} x ${name}` }\n            </h5>\n\n            { (options || []).map(({ name: optionName, value, nameId }) =>\n                <ul\n                    className=\"product-options optimizedCheckout-contentSecondary\"\n                    data-test=\"consigment-item-product-options\"\n                    key={ nameId }\n                >\n                    <li className=\"product-option\">\n                        { `${optionName } ${value}` }\n                    </li>\n                </ul>\n            ) }\n\n            <AddressSelect\n                addresses={ addresses }\n                onSelectAddress={ handleSelectAddress }\n                onUseNewAddress={ handleUseNewAddress }\n                selectedAddress={ consignment && consignment.shippingAddress }\n            />\n        </div>\n    </div>;\n};\n\nexport default memo(ItemAddressSelect);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    shippingOption,\n}) => {\n    const renderLabel = useCallback(() => (\n        <div className=\"shippingOptionLabel\">\n            <StaticShippingOption displayAdditionalInformation={ true } method={ shippingOption } />\n        </div>\n    ), [shippingOption]);\n\n    return <ChecklistItem\n        htmlId={ `shippingOptionRadio-${consignmentId}-${shippingOption.id}` }\n        label={ renderLabel }\n        value={ shippingOption.id }\n    />;\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n }) => {\n    const handleSelect = useCallback((value: string) => {\n        onSelectedOption(consignmentId, value);\n    }, [\n        consignmentId,\n        onSelectedOption,\n    ]);\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={ isLoading }>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={ selectedShippingOptionId }\n                name={ inputName }\n                onSelect={ handleSelect }\n            >\n                { shippingOptions.map(shippingOption => (\n                    <ShippingOptionListItem\n                        consignmentId={ consignmentId }\n                        key={ shippingOption.id }\n                        shippingOption={ shippingOption }\n                    />\n                )) }\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../../address';\nimport { TranslatedString } from '../../locale';\nimport { LoadingOverlay } from '../../ui/loading';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps;\n\nclass ShippingOptionsForm extends PureComponent<ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId,\n        } = this.props;\n\n        if (!consignments ||\n            !consignments.length ||\n            !shouldShowShippingOptions\n        ) {\n            return (\n                <LoadingOverlay isLoading={ isLoading() }>\n                    { this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={ methodId || isMultiShippingMode ?\n                                'shipping.select_shipping_address_text' :\n                                'shipping.enter_shipping_address_text' }\n                        />\n                    ) }\n                </LoadingOverlay>\n            );\n        }\n\n        return <>\n            { consignments\n                .map(consignment => (\n                <div className=\"shippingOptions-container form-fieldset\" key={ consignment.id }>\n                        { isMultiShippingMode && this.renderConsignment(consignment) }\n\n                        <ShippingOptionsList\n                            consignmentId={ consignment.id }\n                            inputName={ getRadioInputName(consignment.id) }\n                            isLoading={ isLoading(consignment.id) }\n                            onSelectedOption={ selectShippingOption }\n                            selectedShippingOptionId={ consignment.selectedShippingOption && consignment.selectedShippingOption.id }\n                            shippingOptions={ consignment.availableShippingOptions }\n                        />\n\n                        { (!consignment.availableShippingOptions || !consignment.availableShippingOptions.length) &&\n                            <LoadingOverlay hideContentWhenLoading isLoading={ isLoading(consignment.id) }>\n                                { this.renderNoShippingOptions(invalidShippingMessage) }\n                            </LoadingOverlay> }\n                    </div>\n                )) }\n        </>;\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(({\n            selectedShippingOption,\n            availableShippingOptions: shippingOptions,\n        }) => !selectedShippingOption && shippingOptions);\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption = availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\">\n                    { message }\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={ consignment.shippingAddress } />\n\n                <StaticConsignmentItemList\n                    cart={ cart }\n                    consignment={ consignment }\n                />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach(consignment => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption ?\n                consignment.selectedShippingOption.id :\n                '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(availableShippingOptions: ShippingOption[]): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(({ isRecommended }: { isRecommended: any }) => isRecommended);\n}\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    subscribe => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    }\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (isUpdatingAddress, isLoadingShippingOptions, isSelectingShippingOption, isUpdatingConsignment, isCreatingConsignments) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    }\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, consignment => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: {\n            getCart,\n            getConsignments,\n            getConfig,\n            getCustomer,\n            getCheckout,\n        },\n        statuses: {\n            isSelectingShippingOption,\n        },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() ||  []);\n    const methodId = getShippingMethodId(checkout);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({ checkoutService, checkoutState }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n}\n\nclass ShippingFormFooter extends PureComponent<ShippingFormFooterProps> {\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isMultiShippingMode,\n            shouldShowOrderComments,\n            shouldShowShippingOptions = true,\n            shouldDisableSubmit,\n            isLoading,\n        } = this.props;\n\n        return <>\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        { cartHasChanged &&\n                            <Alert type={ AlertType.Error }>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert> }\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isMultiShippingMode={ isMultiShippingMode }\n                    isUpdatingAddress={ isLoading }\n                    shouldShowShippingOptions={ shouldShowShippingOptions }\n                />\n            </Fieldset>\n\n            { shouldShowOrderComments &&\n                <OrderComments /> }\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={ shouldDisableSubmit }\n                    id=\"checkout-shipping-continue\"\n                    isLoading={ isLoading }\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>;\n    }\n}\n\nexport default ShippingFormFooter;\n","import { Address, AddressRequestBody, Cart, CheckoutSelectors, CheckoutStoreSelector, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { Fragment, PureComponent, ReactNode } from 'react';\n\nimport { isValidAddress, mapAddressFromFormValues, AddressFormModal, AddressFormValues } from '../address';\nimport { preventDefault } from '../common/dom';\nimport { ErrorModal } from '../common/error';\nimport { withLanguage, TranslatedLink, TranslatedString, WithLanguageProps } from '../locale';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport updateShippableItems from './updateShippableItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    shouldShowAddAddressInCheckout: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): void;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>, MultiShippingFormState> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onSignIn,\n            onCreateAccount,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />\n                    { ' ' }\n                    <a data-test=\"shipping-sign-in-link\" href=\"#\" onClick={ preventDefault(onSignIn) }>\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>\n                    { ' ' }\n                    <TranslatedLink\n                        id=\"shipping.multishipping_guest_create\"\n                        onClick={ onCreateAccount }\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <Fragment>\n                <ErrorModal\n                    error={ createCustomerAddressError }\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />\n                            { ' ' }\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={ this.handleCloseErrorModal }\n                    shouldShowErrorCode={ false }\n                />\n                { <AddressFormModal\n                    countries={ countries }\n                    countriesWithAutocomplete={ countriesWithAutocomplete }\n                    defaultCountryCode={ defaultCountryCode }\n                    getFields={ getFields }\n                    googleMapsApiKey={ googleMapsApiKey }\n                    isLoading={ isLoading }\n                    isOpen={ !!itemAddingAddress }\n                    onRequestClose={ this.handleCloseAddAddressForm }\n                    onSaveAddress={ this.handleSaveAddress }\n                /> }\n\n                <Form>\n                    <ul className=\"consignmentList\">\n                        { items.map(item => (\n                            <li key={ item.key }>\n                                <ItemAddressSelect\n                                    addresses={ addresses }\n                                    item={ item }\n                                    onSelectAddress={ this.handleSelectAddress }\n                                    onUseNewAddress={ this.handleUseNewAddress }\n                                />\n                            </li>\n                        )) }\n                    </ul>\n\n                    <ShippingFormFooter\n                        cartHasChanged={ cartHasChanged }\n                        isLoading={ isLoading }\n                        isMultiShippingMode={ true }\n                        shouldDisableSubmit={ this.shouldDisableSubmit() }\n                        shouldShowOrderComments={ shouldShowOrderComments }\n                        shouldShowShippingOptions={ !hasUnassignedLineItems(consignments, cart.lineItems) }\n                    />\n                </Form>\n            </Fragment>\n        );\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async address => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(shippingAddress, itemAddingAddress.itemId, itemAddingAddress.key);\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (e) {\n            this.setState({ createCustomerAddressError: e });\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string, itemKey: string) => void = (address, itemId, itemKey) => {\n        const { onUseNewAddress, shouldShowAddAddressInCheckout } = this.props;\n\n        if (!shouldShowAddAddressInCheckout) {\n            onUseNewAddress(address, itemId);\n\n            return;\n        }\n\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (address: Address, itemId: string, itemKey: string) => Promise<void> = async (address, itemId, itemKey) => {\n        const {\n            assignItem,\n            onUnhandledError,\n            getFields,\n        } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                address,\n                lineItems: [{\n                    itemId,\n                    quantity: 1,\n                }],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (e) {\n            onUnhandledError(new AssignItemFailedError(e));\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (\n        key: string,\n        address: Address,\n        data: CheckoutStoreSelector\n    ) => void = (key, address, data) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex(item => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            }\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ customerMessage }) => ({\n        orderComment: customerMessage,\n    }),\n    enableReinitialize: true,\n})(MultiShippingForm));\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] }\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find(consignment =>\n        isEqualAddress(consignment.shippingAddress, address)\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if (newId && !cartItemIds.includes(item.id) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        } else {\n            return item;\n        }\n    });\n}\n\nfunction findNewItemId(item: ShippableItem, cart?: Cart, consignment?: Consignment): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find(id => matchingCartItemIds.includes(id));\n}\n","import React, { memo, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps>  = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"billing.use_shipping_address_label\" />\n    ), []);\n\n    return <CheckboxFormField\n        id=\"sameAsBilling\"\n        labelContent={ labelContent }\n        name=\"billingSameAsShipping\"\n        onChange={ onChange }\n    />;\n};\n\nexport default memo(BillingSameAsShippingField);\n","import { CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { DynamicFormField, Fieldset } from '../ui/form';\n\nexport interface RemoteShippingAddressProps {\n    containerId: string;\n    methodId: string;\n    formFields: FormField[];\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n    onFieldChange(fieldName: string, value: string): void;\n}\n\nclass RemoteShippingAddress extends PureComponent<RemoteShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            containerId,\n            formFields,\n            methodId,\n        } = this.props;\n\n        return (\n            <>\n                <div\n                    className={ `widget address-widget widget--${methodId}` }\n                    id={ containerId }\n                    tabIndex={ -1 }\n                />\n                <Fieldset>\n                {\n                    formFields.filter(({ custom }) => custom).map(field => (\n                        <DynamicFormField\n                            field={ field }\n                            key={ `${field.id}-${field.name}` }\n                            onChange={ this.handleFieldValueChange(field.name) }\n                            parentFieldName=\"shippingAddress.customFields\"\n                        />\n                    ))\n                }\n                </Fieldset>\n            </>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default RemoteShippingAddress;\n","import { Address, Consignment, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport {  isValidCustomerAddress, AddressForm, AddressSelect } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            formik: {\n                values: {\n                    shippingAddress: formAddress,\n                },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(shippingAddress, addresses, formFields);\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                { hasAddresses &&\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={ isLoading }>\n                            <AddressSelect\n                                addresses={ addresses }\n                                onSelectAddress={ onAddressSelect }\n                                onUseNewAddress={ onUseNewAddress }\n                                selectedAddress={ hasValidCustomerAddress ? shippingAddress : undefined }\n                            />\n                        </LoadingOverlay>\n                    </Fieldset> }\n\n                { !hasValidCustomerAddress &&\n                    <LoadingOverlay isLoading={ isLoading } unmountContentWhenLoading>\n                        <AddressForm\n                            countries={ countries }\n                            countriesWithAutocomplete={ countriesWithAutocomplete }\n                            countryCode={ formAddress && formAddress.countryCode }\n                            fieldName={ addressFieldName }\n                            formFields={ formFields }\n                            googleMapsApiKey={ googleMapsApiKey }\n                            onAutocompleteToggle={ this.handleAutocompleteToggle }\n                            onChange={ this.handleChange }\n                            setFieldValue={ this.setFieldValue }\n                            shouldShowSaveAddress={ shouldShowSaveAddress }\n                        />\n                    </LoadingOverlay> }\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (fieldName, fieldValue) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter(field => field.custom)\n            .map(field => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName) ?\n            `customFields.${fieldName}` :\n            fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const {\n            onFieldChange,\n        } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({ isOpen, inputValue }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import { Address, CheckoutSelectors, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../address/';\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            address,\n            buttonId,\n            formFields,\n            isLoading,\n        } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={ isLoading }>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress\n                            address={ address }\n                        />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={ buttonId }\n                            onClick={ preventDefault() }\n                            size={ ButtonSize.Tiny }\n                            testId=\"step-edit-button\"\n                            variant={ ButtonVariant.Secondary }\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                { shouldShowCustomFormFields && <Fieldset id=\"customFieldset\">\n                    {\n                        customFormFields.map(field => (\n                            <DynamicFormField\n                                field={ field }\n                                key={ `${field.id}-${field.name}` }\n                                onChange={ this.handleFieldValueChange(field.name) }\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))\n                    }\n                </Fieldset> }\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void = name => value => {\n        const { onFieldChange } = this.props;\n        onFieldChange(name, value);\n    };\n}\n\nexport default StaticAddressEditable;\n","import { Address, CheckoutSelectors, Consignment, Country, CustomerAddress, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent } from 'react';\n\nimport { FormContext } from '../ui/form';\n\nimport RemoteShippingAddress from './RemoteShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\nimport StaticAddressEditable from './StaticAddressEditable';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = props => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        onUnhandledError = noop,\n        isShippingStepPending,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const initializeShipping = useCallback(memoizeOne((defaultOptions: ShippingInitializeOptions) => (\n        (options?: ShippingInitializeOptions) => initialize({\n            ...defaultOptions,\n            ...options,\n        })\n    )), []);\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId) {\n        const containerId = 'addressWidget';\n        let options: ShippingInitializeOptions = {};\n\n        if (methodId === 'amazon') {\n            options = {\n                amazon: {\n                    container: containerId,\n                    onError: onUnhandledError,\n                },\n            };\n\n            return (\n                <RemoteShippingAddress\n                    containerId={ containerId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n\n        if (methodId === 'amazonpay' && shippingAddress) {\n            const editAddressButtonId = 'edit-ship-button';\n\n            options = {\n                amazonpay: {\n                    editAddressButtonId,\n                },\n            };\n\n            return (\n                <StaticAddressEditable\n                    address={ shippingAddress }\n                    buttonId={ editAddressButtonId }\n                    deinitialize={ deinitialize }\n                    formFields={ formFields }\n                    initialize={ initializeShipping(options) }\n                    isLoading={ isShippingStepPending }\n                    methodId={ methodId }\n                    onFieldChange={ onFieldChange }\n                />\n            );\n        }\n    }\n\n    return (\n        <ShippingAddressForm\n            address={ shippingAddress }\n            addresses={ addresses }\n            consignments={ consignments }\n            countries={ countries }\n            countriesWithAutocomplete={ countriesWithAutocomplete }\n            formFields={ formFields }\n            googleMapsApiKey={ googleMapsApiKey }\n            isLoading={ isLoading }\n            onAddressSelect={ onAddressSelect }\n            onFieldChange={ handleFieldChange }\n            onUseNewAddress={ onUseNewAddress }\n            shouldShowSaveAddress={ shouldShowSaveAddress }\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import { Address, CheckoutParams, CheckoutSelectors, Consignment, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { debounce, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { getAddressFormFieldsValidationSchema, getTranslateAddressError, isEqualAddress, mapAddressFromFormValues, mapAddressToFormValues, AddressFormValues } from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { Fieldset, Form, FormContext } from '../ui/form';\n\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(async (address: Address, includeShippingOptions: boolean) => {\n            try {\n                await updateAddress(address, {\n                    params: {\n                        include: {\n                            'consignments.availableShippingOptions': includeShippingOptions,\n                        },\n                    },\n                });\n                if (includeShippingOptions) {\n                    this.setState({ hasRequestedShippingOptions: true });\n                }\n            } finally {\n                this.setState({ isUpdatingShippingData: false });\n            }\n        }, SHIPPING_AUTOSAVE_DELAY);\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n        } = this.props;\n\n        const {\n            isResettingAddress,\n            isUpdatingShippingData,\n            hasRequestedShippingOptions,\n        } = this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazon', 'amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(method => method === methodId);\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={ addresses }\n                        consignments={ consignments }\n                        countries={ countries }\n                        countriesWithAutocomplete={ countriesWithAutocomplete }\n                        deinitialize={ deinitialize }\n                        formFields={ this.getFields(addressForm && addressForm.countryCode) }\n                        googleMapsApiKey={ googleMapsApiKey }\n                        hasRequestedShippingOptions={ hasRequestedShippingOptions }\n                        initialize={ initialize }\n                        isLoading={ isResettingAddress }\n                        isShippingStepPending={ isShippingStepPending }\n                        methodId={ methodId }\n                        onAddressSelect={ this.handleAddressSelect }\n                        onFieldChange={ this.handleFieldChange }\n                        onUnhandledError={ onUnhandledError }\n                        onUseNewAddress={ this.onUseNewAddress }\n                        shippingAddress={ shippingAddress }\n                        shouldShowSaveAddress={ shouldShowSaveAddress }\n                    />\n                    {\n                        shouldShowBillingSameAsShipping && <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    }\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={ cartHasChanged }\n                    isLoading={ isLoading || isUpdatingShippingData }\n                    isMultiShippingMode={ false }\n                    shouldDisableSubmit={ this.shouldDisableSubmit() }\n                    shouldShowOrderComments={ shouldShowOrderComments }\n                    shouldShowShippingOptions={ isValid }\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const {\n            isLoading,\n            consignments,\n            isValid,\n        } = this.props;\n\n        const {\n            isUpdatingShippingData,\n        } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async name => {\n        const {\n            setFieldValue,\n        } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise(resolve => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (\n        address: Address\n    ) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError = noop,\n            values,\n            setValues,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const {\n            deleteConsignments,\n            onUnhandledError = noop,\n            setValues,\n            values,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const {\n            getFields,\n        } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, shippingAddress, isBillingSameAsShipping, customerMessage }) => ({\n        billingSameAsShipping: isBillingSameAsShipping,\n        orderComment: customerMessage,\n        shippingAddress: mapAddressToFormValues(\n            getFields(shippingAddress && shippingAddress.countryCode),\n            shippingAddress\n        ),\n    }),\n    isInitialValid: ({\n        shippingAddress,\n        getFields,\n        language,\n    }) => (\n        !!shippingAddress && getAddressFormFieldsValidationSchema({\n            language,\n            formFields: getFields(shippingAddress.countryCode),\n        }).isValidSync(shippingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n        methodId,\n    }: SingleShippingFormProps & WithLanguageProps) => methodId ?\n        object({\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                getCustomFormFieldsValidationSchema({\n                    translate: getTranslateAddressError(language),\n                    formFields: getFields(formValues && formValues.countryCode),\n                })\n            ),\n        }) :\n        object({\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(formValues && formValues.countryCode),\n                })\n            ),\n        }),\n    enableReinitialize: false,\n})(SingleShippingForm));\n","import { Address, AddressRequestBody, Cart, CheckoutParams, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowAddAddressInCheckout: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n}\n\nclass ShippingForm extends Component<ShippingFormProps & WithLanguageProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            assignItem,\n            cart,\n            cartHasChanged,\n            createCustomerAddress,\n            consignments,\n            countries,\n            countriesWithAutocomplete,\n            onCreateAccount,\n            customerMessage,\n            deinitialize,\n            deleteConsignments,\n            getFields,\n            googleMapsApiKey,\n            initialize,\n            isBillingSameAsShipping,\n            isGuest,\n            isLoading,\n            isMultiShippingMode,\n            methodId,\n            onMultiShippingSubmit,\n            onSignIn,\n            onSingleShippingSubmit,\n            onUnhandledError,\n            onUseNewAddress,\n            shippingAddress,\n            shouldShowOrderComments,\n            shouldShowSaveAddress,\n            shouldShowAddAddressInCheckout,\n            signOut,\n            updateAddress,\n            isShippingStepPending,\n        } = this.props;\n\n        return isMultiShippingMode ?\n            <MultiShippingForm\n                addresses={ addresses }\n                assignItem={ assignItem }\n                cart={ cart }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                createCustomerAddress={ createCustomerAddress }\n                customerMessage={ customerMessage }\n                defaultCountryCode={ shippingAddress?.countryCode }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                isGuest={ isGuest }\n                isLoading={ isLoading }\n                onCreateAccount={ onCreateAccount }\n                onSignIn={ onSignIn }\n                onSubmit={ onMultiShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                onUseNewAddress={ onUseNewAddress }\n                shouldShowAddAddressInCheckout={ shouldShowAddAddressInCheckout }\n                shouldShowOrderComments={ shouldShowOrderComments }\n            /> :\n            <SingleShippingForm\n                addresses={ addresses }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                customerMessage={ customerMessage }\n                deinitialize={ deinitialize }\n                deleteConsignments={ deleteConsignments }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                initialize={ initialize }\n                isBillingSameAsShipping={ isBillingSameAsShipping }\n                isLoading={ isLoading }\n                isMultiShippingMode={ isMultiShippingMode }\n                isShippingStepPending={ isShippingStepPending }\n                methodId={ methodId }\n                onSubmit={ onSingleShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                shippingAddress={ shippingAddress }\n                shouldShowOrderComments={ shouldShowOrderComments }\n                shouldShowSaveAddress={ shouldShowSaveAddress }\n                signOut={ signOut }\n                updateAddress={ updateAddress }\n            />;\n    }\n}\n\nexport default withLanguage(ShippingForm);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => (\n    <div className=\"form-legend-container\">\n        <Legend testId=\"shipping-address-heading\">\n            <TranslatedString\n                id={ isMultiShippingMode ?\n                    (isGuest ?\n                        'shipping.multishipping_address_heading_guest' :\n                        'shipping.multishipping_address_heading') :\n                    'shipping.shipping_address_heading' }\n            />\n        </Legend>\n\n        { shouldShowMultiShipping &&\n            <a\n                data-test=\"shipping-mode-toggle\"\n                href=\"#\"\n                onClick={ preventDefault(onMultiShippingChange) }\n            >\n                <TranslatedString id={ isMultiShippingMode ?\n                    'shipping.ship_to_single' :\n                    'shipping.ship_to_multi' }\n                />\n            </a> }\n    </div>\n);\n\nexport default memo(ShippingHeader);\n","import { Address, AddressRequestBody, Cart, CheckoutRequestBody, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, Customer, CustomerRequestOptions, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await Promise.all([\n                loadShippingAddressFields(),\n                loadShippingOptions(),\n            ]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            unassignItem,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            onToggleMultiShipping,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n        } = this.state;\n\n        return (\n            <div className=\"checkout-form\">\n                <ShippingHeader\n                    isGuest={ isGuest }\n                    isMultiShippingMode={ isMultiShippingMode }\n                    onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                    shouldShowMultiShipping={ shouldShowMultiShipping }\n                />\n\n                <LoadingOverlay\n                    isLoading={ isInitializing }\n                    unmountContentWhenLoading\n                >\n                    <ShippingForm\n                        { ...shippingFormProps }\n                        addresses={ customer.addresses }\n                        deinitialize={ deinitializeShippingMethod }\n                        initialize={ initializeShippingMethod }\n                        isBillingSameAsShipping = { isBillingSameAsShipping }\n                        isGuest={ isGuest }\n                        isMultiShippingMode={ isMultiShippingMode }\n                        onMultiShippingSubmit={ this.handleMultiShippingSubmit }\n                        onSingleShippingSubmit={ this.handleSingleShippingSubmit }\n                        onUseNewAddress={ this.handleUseNewAddress }\n                        shouldShowSaveAddress={ !isGuest }\n                        updateAddress={ updateShippingAddress }\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n        } = this.props;\n\n        if (isMultiShippingMode && consignments.length > 1) {\n            this.setState({ isInitializing: true });\n\n            try {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            } catch (error) {\n                onUnhandledError(error);\n            } finally {\n                this.setState({ isInitializing: false });\n            }\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = methodId => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some(method => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (address, itemId) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                address,\n                lineItems: [{\n                    quantity: 1,\n                    itemId,\n                }],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (e) {\n            onUnhandledError(new UnassignItemError(e));\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({ orderComment }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) =>\n            deleteConsignment(id)\n        ));\n\n        return data.getShippingAddress();\n    }\n);\n\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading = (\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress()\n    );\n    const shouldShowMultiShipping = (\n        hasMultiShippingEnabled &&\n        !methodId &&\n        shippableItemsCount > 1 &&\n        shippableItemsCount < 50\n    );\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    const shippingAddress = !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        shippingAddress,\n        shouldShowMultiShipping,\n        shouldShowAddAddressInCheckout: features['CHECKOUT-4726.add_address_in_multishipping_checkout'],\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne(selectedItemId => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const {\n            children,\n            className = 'accordion',\n            defaultSelectedItemId,\n        } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={ this.getContextValue(selectedItemId) }>\n                <ul className={ className }>\n                    { children }\n                </ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = id => {\n        const { isDisabled, onSelect = noop } = this.props;\n\n        if (isDisabled) {\n            return;\n        }\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, { createContext, memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps &\n    ConnectFormikProps<{ [key: string]: string }>\n> = ({\n    formik: { setFieldValue },\n    name,\n    onSelect = noop,\n    ...props\n}) => {\n    const handleSelect = useCallback((value: string) => {\n        setFieldValue(name, value);\n        onSelect(value);\n    }, [\n        name,\n        onSelect,\n        setFieldValue,\n    ]);\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={ contextValue }>\n            <Accordion\n                { ...props }\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={ handleSelect }\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import classNames from 'classnames';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={ classNames(\n            className,\n            { [classNameSelected]: isSelected }\n        ) }\n        >\n            <div className={ classNames(\n                headerClassName,\n                { [headerClassNameSelected]: isSelected }\n            ) }\n            >\n                { headerContent({ isSelected, onToggle }) }\n            </div>\n\n            { children && <CSSTransition\n                addEndListener={ transitionEndListener }\n                classNames={ bodyClassName }\n                in={ isSelected }\n                mountOnEnter\n                timeout={ {} }\n                unmountOnExit\n            >\n                <div className={ bodyClassName }>\n                    { children }\n                </div>\n            </CSSTransition> }\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            { ...props }\n            checked={ isSelected }\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={ id }\n            type=\"radio\"\n        />\n\n        <Label htmlFor={ id }>\n            { children }\n        </Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n        <ChecklistItemInput\n            { ...field }\n            disabled={ isDisabled }\n            id={ htmlId }\n            isSelected={ field.value === value }\n            value={ value }\n        >\n            { label instanceof Function ?\n                label(isSelected) :\n                label }\n        </ChecklistItemInput>\n    )), [\n        htmlId,\n        isDisabled,\n        label,\n        value,\n    ]);\n\n    const handleChange = useCallback(memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n        if (value === selectedValue) {\n            onToggle(value);\n        }\n    }), []);\n\n    const renderHeaderContent = useCallback(({\n        isSelected,\n        onToggle,\n    }: AccordionItemHeaderProps) => (\n        <BasicFormField\n            className=\"form-checklist-option\"\n            name={ name }\n            onChange={ handleChange(onToggle) }\n            render={ renderInput(isSelected) }\n        />\n    ), [\n        handleChange,\n        name,\n        renderInput,\n    ]);\n\n    return (\n        <AccordionItem\n            { ...rest }\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={ renderHeaderContent }\n            itemId={ value }\n        >\n            { content }\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n"],"sourceRoot":""}